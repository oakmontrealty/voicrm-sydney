import { useState, useEffect } from 'react'\nimport { User, Phone, Mail, Building, MapPin, Star, Clock, TrendingUp } from 'lucide-react'\n\nexport default function ContactCard({ contact, onCall, onEdit, onSelect, isSelected }) {\n  const [recentActivity, setRecentActivity] = useState([])\n  const [leadScore, setLeadScore] = useState(contact?.lead_score || 0)\n  const [lastInteraction, setLastInteraction] = useState(null)\n  \n  useEffect(() => {\n    if (contact) {\n      loadRecentActivity()\n      calculateLeadScore()\n    }\n  }, [contact])\n  \n  const loadRecentActivity = async () => {\n    try {\n      const response = await fetch('/api/contacts/activity', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ contactId: contact.id, limit: 5 })\n      })\n      \n      const { activities } = await response.json()\n      setRecentActivity(activities || [])\n      \n      if (activities && activities.length > 0) {\n        setLastInteraction(activities[0])\n      }\n    } catch (error) {\n      console.error('Failed to load activity:', error)\n    }\n  }\n  \n  const calculateLeadScore = () => {\n    let score = 50 // Base score\n    \n    // Recent activity boost\n    if (lastInteraction) {\n      const daysSince = (Date.now() - new Date(lastInteraction.created_at).getTime()) / (1000 * 60 * 60 * 24)\n      if (daysSince < 1) score += 20\n      else if (daysSince < 7) score += 10\n    }\n    \n    // Contact completeness\n    if (contact.email) score += 5\n    if (contact.phone_mobile) score += 5\n    if (contact.company) score += 5\n    if (contact.notes) score += 5\n    \n    // Engagement indicators\n    if (contact.status === 'hot') score += 25\n    else if (contact.status === 'warm') score += 15\n    else if (contact.status === 'cold') score -= 10\n    \n    setLeadScore(Math.min(Math.max(score, 0), 100))\n  }\n  \n  const formatAustralianPhone = (phone) => {\n    if (!phone) return ''\n    const digits = phone.replace(/\\D/g, '')\n    \n    if (digits.startsWith('61')) {\n      const local = digits.slice(2)\n      if (local.startsWith('4')) {\n        return `+61 ${local.slice(0, 3)} ${local.slice(3, 6)} ${local.slice(6)}`\n      }\n      return `+61 ${local.slice(0, 1)} ${local.slice(1, 5)} ${local.slice(5)}`\n    }\n    \n    if (digits.startsWith('04')) {\n      return `${digits.slice(0, 4)} ${digits.slice(4, 7)} ${digits.slice(7)}`\n    }\n    \n    if (digits.startsWith('0')) {\n      return `${digits.slice(0, 2)} ${digits.slice(2, 6)} ${digits.slice(6)}`\n    }\n    \n    return phone\n  }\n  \n  const getLeadScoreColor = (score) => {\n    if (score >= 80) return 'text-green-600 bg-green-50'\n    if (score >= 60) return 'text-yellow-600 bg-yellow-50'\n    if (score >= 40) return 'text-orange-600 bg-orange-50'\n    return 'text-red-600 bg-red-50'\n  }\n  \n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'hot': return 'bg-red-100 text-red-800'\n      case 'warm': return 'bg-yellow-100 text-yellow-800'\n      case 'cold': return 'bg-blue-100 text-blue-800'\n      case 'customer': return 'bg-green-100 text-green-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n  \n  const timeSince = (date) => {\n    const seconds = Math.floor((new Date() - new Date(date)) / 1000)\n    \n    let interval = seconds / 31536000\n    if (interval > 1) return Math.floor(interval) + ' years ago'\n    \n    interval = seconds / 2592000\n    if (interval > 1) return Math.floor(interval) + ' months ago'\n    \n    interval = seconds / 86400\n    if (interval > 1) return Math.floor(interval) + ' days ago'\n    \n    interval = seconds / 3600\n    if (interval > 1) return Math.floor(interval) + ' hours ago'\n    \n    interval = seconds / 60\n    if (interval > 1) return Math.floor(interval) + ' minutes ago'\n    \n    return 'Just now'\n  }\n  \n  if (!contact) {\n    return (\n      <div className=\"voicrm-card p-6 animate-pulse\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-12 h-12 bg-oakmont-sage/20 rounded-full\"></div>\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-oakmont-sage/20 rounded mb-2\"></div>\n            <div className=\"h-3 bg-oakmont-cream rounded\"></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  \n  return (\n    <div \n      className={`voicrm-card p-6 cursor-pointer transition-all duration-300 ${\n        isSelected ? 'ring-2 ring-oakmont-sage bg-oakmont-sage/5' : 'hover:shadow-oakmont-lg'\n      }`}\n      onClick={() => onSelect?.(contact)}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-oakmont-sage rounded-full flex items-center justify-center\">\n            <User className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-oakmont-black text-lg\">\n              {contact.first_name} {contact.last_name}\n            </h3>\n            {contact.company && (\n              <p className=\"text-oakmont-grey text-sm flex items-center space-x-1\">\n                <Building className=\"h-3 w-3\" />\n                <span>{contact.company}</span>\n              </p>\n            )}\n          </div>\n        </div>\n        \n        {/* Lead Score Badge */}\n        <div className={`px-3 py-1 rounded-full text-sm font-semibold flex items-center space-x-1 ${getLeadScoreColor(leadScore)}`}>\n          <Star className=\"h-3 w-3\" />\n          <span>{leadScore}</span>\n        </div>\n      </div>\n      \n      {/* Contact Information */}\n      <div className=\"space-y-2 mb-4\">\n        {contact.phone_primary && (\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Phone className=\"h-4 w-4 text-oakmont-tan\" />\n            <span className=\"font-mono\">{formatAustralianPhone(contact.phone_primary)}</span>\n            <span className=\"text-oakmont-grey text-xs\">(Primary)</span>\n          </div>\n        )}\n        \n        {contact.phone_mobile && contact.phone_mobile !== contact.phone_primary && (\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Phone className=\"h-4 w-4 text-oakmont-brown\" />\n            <span className=\"font-mono\">{formatAustralianPhone(contact.phone_mobile)}</span>\n            <span className=\"text-oakmont-grey text-xs\">(Mobile)</span>\n          </div>\n        )}\n        \n        {contact.email && (\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Mail className=\"h-4 w-4 text-oakmont-sage\" />\n            <span>{contact.email}</span>\n          </div>\n        )}\n        \n        {contact.address && (\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <MapPin className=\"h-4 w-4 text-oakmont-grey\" />\n            <span className=\"text-oakmont-grey\">{contact.address}</span>\n          </div>\n        )}\n      </div>\n      \n      {/* Status and Last Contact */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(contact.status)}`}>\n          {contact.status?.toUpperCase() || 'PROSPECT'}\n        </span>\n        \n        {contact.last_contacted && (\n          <div className=\"flex items-center space-x-1 text-xs text-oakmont-grey\">\n            <Clock className=\"h-3 w-3\" />\n            <span>Last contact: {timeSince(contact.last_contacted)}</span>\n          </div>\n        )}\n      </div>\n      \n      {/* Recent Activity Preview */}\n      {recentActivity.length > 0 && (\n        <div className=\"mb-4 p-3 bg-oakmont-cream rounded-lg\">\n          <h4 className=\"text-xs font-semibold text-oakmont-sage mb-2 flex items-center space-x-1\">\n            <TrendingUp className=\"h-3 w-3\" />\n            <span>Recent Activity</span>\n          </h4>\n          <div className=\"space-y-1\">\n            {recentActivity.slice(0, 2).map((activity, index) => (\n              <div key={index} className=\"text-xs text-oakmont-grey\">\n                <span className=\"font-medium\">{activity.interaction_type}:</span> {activity.notes?.slice(0, 40)}...\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Notes Preview */}\n      {contact.notes && (\n        <div className=\"mb-4 p-3 bg-oakmont-sage/5 rounded-lg border border-oakmont-sage/10\">\n          <p className=\"text-sm text-oakmont-black\">\n            {contact.notes.length > 100 ? contact.notes.slice(0, 100) + '...' : contact.notes}\n          </p>\n        </div>\n      )}\n      \n      {/* Action Buttons */}\n      <div className=\"flex space-x-2\">\n        <button\n          onClick={(e) => {\n            e.stopPropagation()\n            onCall?.(contact)\n          }}\n          className=\"flex-1 voicrm-btn-primary flex items-center justify-center space-x-2 text-sm\"\n        >\n          <Phone className=\"h-4 w-4\" />\n          <span>Call Now</span>\n        </button>\n        \n        <button\n          onClick={(e) => {\n            e.stopPropagation()\n            onEdit?.(contact)\n          }}\n          className=\"voicrm-btn-secondary px-4 flex items-center justify-center\"\n        >\n          <User className=\"h-4 w-4\" />\n        </button>\n      </div>\n      \n      {/* Quick Actions */}\n      <div className=\"flex justify-between mt-3 text-xs\">\n        <button className=\"text-oakmont-tan hover:text-oakmont-brown transition-colors\">\n          Send SMS\n        </button>\n        <button className=\"text-oakmont-sage hover:text-oakmont-brown transition-colors\">\n          Email\n        </button>\n        <button className=\"text-oakmont-grey hover:text-oakmont-sage transition-colors\">\n          Schedule\n        </button>\n      </div>\n    </div>\n  )\n}