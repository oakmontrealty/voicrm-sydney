import { useState, useEffect, useRef } from 'react'\nimport { Brain, Lightbulb, AlertTriangle, CheckCircle, Clock, Zap } from 'lucide-react'\n\nexport default function LiveCoaching({ callSid, transcript, contact, property, isActive }) {\n  const [coachingTips, setCoachingTips] = useState([])\n  const [currentTip, setCurrentTip] = useState(null)\n  const [sentiment, setSentiment] = useState('neutral')\n  const [callStage, setCallStage] = useState('opening')\n  const [responseTime, setResponseTime] = useState(0)\n  const [isProcessing, setIsProcessing] = useState(false)\n  \n  const lastProcessedRef = useRef('')\n  const processingTimeoutRef = useRef(null)\n  \n  useEffect(() => {\n    if (isActive && transcript && transcript !== lastProcessedRef.current) {\n      processLatestTranscript(transcript)\n      lastProcessedRef.current = transcript\n    }\n  }, [transcript, isActive])\n  \n  const processLatestTranscript = async (latestTranscript) => {\n    if (isProcessing) return\n    \n    setIsProcessing(true)\n    const startTime = performance.now()\n    \n    try {\n      // Clear any existing timeout\n      if (processingTimeoutRef.current) {\n        clearTimeout(processingTimeoutRef.current)\n      }\n      \n      // Generate AI coaching with strict timeout\n      const coachingPromise = generateCoaching(latestTranscript)\n      const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Timeout')), 250)\n      )\n      \n      const coaching = await Promise.race([coachingPromise, timeoutPromise])\n      \n      const processingTime = performance.now() - startTime\n      setResponseTime(processingTime)\n      \n      if (coaching) {\n        const newTip = {\n          id: Date.now(),\n          ...coaching,\n          timestamp: new Date().toISOString(),\n          processingTime\n        }\n        \n        setCurrentTip(newTip)\n        setCoachingTips(prev => [newTip, ...prev.slice(0, 9)]) // Keep last 10\n        \n        // Auto-hide tip after 10 seconds unless high urgency\n        if (coaching.urgency !== 'high') {\n          processingTimeoutRef.current = setTimeout(() => {\n            setCurrentTip(null)\n          }, 10000)\n        }\n      }\n      \n    } catch (error) {\n      console.error('Coaching processing error:', error)\n      // Fail silently for user experience\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n  \n  const generateCoaching = async (transcript) => {\n    const prompt = `\n    REAL ESTATE CALL COACHING - SYDNEY MARKET\n    Respond in JSON format ONLY, under 250ms target.\n    \n    CONTEXT:\n    Client: ${contact?.first_name} ${contact?.last_name}\n    Lead Score: ${contact?.lead_score}/10\n    Status: ${contact?.status}\n    Property: ${property?.address || 'No specific property'}\n    Call Stage: ${callStage}\n    \n    LATEST TRANSCRIPT:\n    \"${transcript}\"\n    \n    Analyze and provide:\n    {\n      \"tip\": \"One actionable coaching tip (max 15 words)\",\n      \"nextQuestion\": \"Suggested next question to ask\",\n      \"urgency\": \"low|medium|high\",\n      \"sentiment\": \"positive|neutral|negative|concerned\",\n      \"stage\": \"opening|discovery|presentation|handling_objection|closing\",\n      \"confidence\": 0.85,\n      \"keywords\": [\"detected\", \"intent\", \"keywords\"]\n    }\n    \n    Australian real estate focus. If objection detected, provide specific response.\n    `\n    \n    const response = await fetch('/api/ai/coaching', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        prompt,\n        transcript,\n        callSid,\n        contactId: contact?.id,\n        propertyId: property?.id\n      }),\n      signal: AbortSignal.timeout(250) // 250ms timeout\n    })\n    \n    if (!response.ok) throw new Error('Coaching API failed')\n    \n    const result = await response.json()\n    \n    // Update component state based on AI analysis\n    setSentiment(result.sentiment)\n    setCallStage(result.stage)\n    \n    return result\n  }\n  \n  const dismissTip = () => {\n    setCurrentTip(null)\n    if (processingTimeoutRef.current) {\n      clearTimeout(processingTimeoutRef.current)\n    }\n  }\n  \n  const getUrgencyColor = (urgency) => {\n    switch (urgency) {\n      case 'high': return 'border-red-500 bg-red-50'\n      case 'medium': return 'border-yellow-500 bg-yellow-50'\n      default: return 'border-oakmont-sage bg-oakmont-sage/5'\n    }\n  }\n  \n  const getSentimentIcon = (sentiment) => {\n    switch (sentiment) {\n      case 'positive': return <CheckCircle className=\"h-4 w-4 text-green-600\" />\n      case 'negative': return <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n      case 'concerned': return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n      default: return <Brain className=\"h-4 w-4 text-oakmont-sage\" />\n    }\n  }\n  \n  const getStageProgress = (stage) => {\n    const stages = ['opening', 'discovery', 'presentation', 'handling_objection', 'closing']\n    const currentIndex = stages.indexOf(stage)\n    return ((currentIndex + 1) / stages.length) * 100\n  }\n  \n  if (!isActive) {\n    return (\n      <div className=\"voicrm-card p-6\">\n        <div className=\"text-center py-8\">\n          <Brain className=\"h-12 w-12 text-oakmont-grey/50 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-oakmont-sage mb-2\">AI Coaching</h3>\n          <p className=\"text-oakmont-grey\">Start a call to receive real-time coaching</p>\n        </div>\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"space-y-4\">\n      \n      {/* Live Coaching Tip */}\n      {currentTip && (\n        <div className={`voicrm-card p-4 border-l-4 ${getUrgencyColor(currentTip.urgency)} animate-pulse-slow`}>\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Lightbulb className=\"h-5 w-5 text-oakmont-tan\" />\n              <span className=\"font-semibold text-oakmont-sage\">Live Coaching</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-xs text-oakmont-grey\">\n                {Math.round(currentTip.processingTime)}ms\n              </span>\n              <button\n                onClick={dismissTip}\n                className=\"text-oakmont-grey hover:text-oakmont-sage text-sm\"\n              >\n                Ã—\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"text-oakmont-black font-medium mb-2\">\n            {currentTip.tip}\n          </div>\n          \n          {currentTip.nextQuestion && (\n            <div className=\"text-sm text-oakmont-grey\">\n              <span className=\"font-medium\">Suggested:</span> \"{currentTip.nextQuestion}\"\n            </div>\n          )}\n          \n          {currentTip.keywords && currentTip.keywords.length > 0 && (\n            <div className=\"flex flex-wrap gap-1 mt-2\">\n              {currentTip.keywords.map((keyword, index) => (\n                <span key={index} className=\"px-2 py-1 bg-oakmont-tan/20 text-oakmont-tan text-xs rounded\">\n                  {keyword}\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Call Progress and Sentiment */}\n      <div className=\"voicrm-card p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            {getSentimentIcon(sentiment)}\n            <span className=\"font-medium text-oakmont-sage\">Call Analysis</span>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm text-oakmont-grey\">\n            <Zap className=\"h-3 w-3\" />\n            <span>{Math.round(responseTime)}ms</span>\n          </div>\n        </div>\n        \n        {/* Call Stage Progress */}\n        <div className=\"mb-3\">\n          <div className=\"flex justify-between text-xs text-oakmont-grey mb-1\">\n            <span>Call Stage: {callStage.replace('_', ' ').toUpperCase()}</span>\n            <span>{Math.round(getStageProgress(callStage))}%</span>\n          </div>\n          <div className=\"w-full bg-oakmont-cream rounded-full h-2\">\n            <div \n              className=\"bg-oakmont-sage h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${getStageProgress(callStage)}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        {/* Sentiment Indicator */}\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-oakmont-grey\">Client Sentiment:</span>\n          <span className={`font-medium capitalize ${\n            sentiment === 'positive' ? 'text-green-600' :\n            sentiment === 'negative' ? 'text-red-600' :\n            sentiment === 'concerned' ? 'text-yellow-600' :\n            'text-oakmont-sage'\n          }`}>\n            {sentiment}\n          </span>\n        </div>\n      </div>\n      \n      {/* Coaching History */}\n      {coachingTips.length > 0 && (\n        <div className=\"voicrm-card p-4\">\n          <h4 className=\"font-semibold text-oakmont-sage mb-3 flex items-center space-x-2\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Coaching History</span>\n          </h4>\n          \n          <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n            {coachingTips.map((tip, index) => (\n              <div key={tip.id} className=\"p-3 bg-oakmont-cream rounded-lg text-sm\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"font-medium text-oakmont-black\">{tip.tip}</span>\n                  <span className=\"text-xs text-oakmont-grey\">\n                    {new Date(tip.timestamp).toLocaleTimeString('en-AU', {\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </span>\n                </div>\n                {tip.nextQuestion && (\n                  <div className=\"text-oakmont-grey text-xs\">\n                    Q: {tip.nextQuestion}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Performance Metrics */}\n      <div className=\"voicrm-card p-4\">\n        <h4 className=\"font-semibold text-oakmont-sage mb-3\">AI Performance</h4>\n        \n        <div className=\"grid grid-cols-2 gap-4 text-center\">\n          <div>\n            <div className=\"text-lg font-bold text-oakmont-tan\">\n              {Math.round(responseTime)}ms\n            </div>\n            <div className=\"text-xs text-oakmont-grey\">Response Time</div>\n            <div className={`text-xs mt-1 ${\n              responseTime < 300 ? 'text-green-600' : 'text-yellow-600'\n            }`}>\n              {responseTime < 300 ? 'âœ“ Target Met' : 'âš  Slow Response'}\n            </div>\n          </div>\n          \n          <div>\n            <div className=\"text-lg font-bold text-oakmont-sage\">\n              {coachingTips.length}\n            </div>\n            <div className=\"text-xs text-oakmont-grey\">Tips Generated</div>\n            <div className=\"text-xs text-green-600 mt-1\">\n              âœ“ Active\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Quick Action Suggestions */}\n      {currentTip && currentTip.urgency === 'high' && (\n        <div className=\"voicrm-card p-4 border border-red-200 bg-red-50\">\n          <h4 className=\"font-semibold text-red-800 mb-2 flex items-center space-x-2\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <span>Urgent Action Required</span>\n          </h4>\n          \n          <div className=\"space-y-2\">\n            <button className=\"w-full p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 text-sm font-medium\">\n              Address Objection Now\n            </button>\n            <button className=\"w-full p-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 text-sm font-medium\">\n              Schedule Follow-up\n            </button>\n            <button className=\"w-full p-2 bg-oakmont-sage text-white rounded-lg hover:bg-oakmont-sage/90 text-sm font-medium\">\n              Transfer to Manager\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Real Estate Specific Coaching */}\n      {property && (\n        <div className=\"voicrm-card p-4\">\n          <h4 className=\"font-semibold text-oakmont-sage mb-3\">Property Coaching</h4>\n          \n          <div className=\"space-y-2 text-sm\">\n            <div className=\"p-2 bg-oakmont-cream rounded\">\n              <span className=\"font-medium text-oakmont-black\">Key Selling Points:</span>\n              <ul className=\"text-oakmont-grey mt-1 space-y-1\">\n                <li>â€¢ {property.bedrooms} bed, {property.bathrooms} bath layout</li>\n                <li>â€¢ Located in {property.suburb} ({property.state})</li>\n                {property.property_type && (\n                  <li>â€¢ {property.property_type.charAt(0).toUpperCase() + property.property_type.slice(1)} property type</li>\n                )}\n              </ul>\n            </div>\n            \n            <div className=\"p-2 bg-oakmont-tan/10 rounded border border-oakmont-tan/20\">\n              <span className=\"font-medium text-oakmont-tan\">Market Position:</span>\n              <div className=\"text-oakmont-grey mt-1\">\n                Competitive pricing for {property.suburb} area\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Separate component for coaching tip display\nexport function CoachingTip({ tip, onDismiss, isActive }) {\n  useEffect(() => {\n    if (isActive && tip.urgency !== 'high') {\n      const timer = setTimeout(onDismiss, 8000)\n      return () => clearTimeout(timer)\n    }\n  }, [isActive, tip.urgency, onDismiss])\n  \n  const getIcon = () => {\n    switch (tip.urgency) {\n      case 'high': return <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n      case 'medium': return <Lightbulb className=\"h-5 w-5 text-yellow-600\" />\n      default: return <Brain className=\"h-5 w-5 text-oakmont-sage\" />\n    }\n  }\n  \n  const getBorderColor = () => {\n    switch (tip.urgency) {\n      case 'high': return 'border-red-500'\n      case 'medium': return 'border-yellow-500'\n      default: return 'border-oakmont-sage'\n    }\n  }\n  \n  return (\n    <div className={`fixed top-20 right-4 max-w-sm z-50 voicrm-card p-4 border-l-4 ${getBorderColor()} shadow-lg animate-slide-in`}>\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex items-center space-x-2\">\n          {getIcon()}\n          <span className=\"font-semibold text-oakmont-sage text-sm\">\n            {tip.urgency === 'high' ? 'URGENT' : 'Coaching Tip'}\n          </span>\n        </div>\n        <button\n          onClick={onDismiss}\n          className=\"text-oakmont-grey hover:text-oakmont-sage\"\n        >\n          Ã—\n        </button>\n      </div>\n      \n      <div className=\"text-sm text-oakmont-black font-medium mb-2\">\n        {tip.tip}\n      </div>\n      \n      {tip.nextQuestion && (\n        <div className=\"text-xs text-oakmont-grey bg-oakmont-cream p-2 rounded\">\n          <span className=\"font-medium\">Try asking:</span> \"{tip.nextQuestion}\"\n        </div>\n      )}\n      \n      <div className=\"flex items-center justify-between mt-2 text-xs text-oakmont-grey\">\n        <span>Confidence: {(tip.confidence * 100).toFixed(0)}%</span>\n        <span>{Math.round(tip.processingTime)}ms</span>\n      </div>\n    </div>\n  )\n}