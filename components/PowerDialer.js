import { useState, useEffect } from 'react'\nimport { Play, Pause, SkipForward, Phone, Clock, Users, Target, BarChart3 } from 'lucide-react'\n\nexport default function PowerDialer({ contacts, onCall, onDisposition, supabase }) {\n  const [isActive, setIsActive] = useState(false)\n  const [currentQueue, setCurrentQueue] = useState([])\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [autoAdvance, setAutoAdvance] = useState(true)\n  const [dialingStats, setDialingStats] = useState({\n    attempted: 0,\n    connected: 0,\n    voicemail: 0,\n    noAnswer: 0,\n    callback: 0\n  })\n  const [sessionStart, setSessionStart] = useState(null)\n  const [averageCallTime, setAverageCallTime] = useState(0)\n  \n  useEffect(() => {\n    if (contacts && contacts.length > 0) {\n      // Prioritize queue based on lead scores and last contact time\n      const prioritizedQueue = [...contacts]\n        .filter(c => c.phone_primary) // Only contacts with phone numbers\n        .sort((a, b) => {\n          // Sort by lead score first, then by last contact time\n          const scoreDiff = (b.lead_score || 0) - (a.lead_score || 0)\n          if (scoreDiff !== 0) return scoreDiff\n          \n          const aTime = a.last_contacted ? new Date(a.last_contacted).getTime() : 0\n          const bTime = b.last_contacted ? new Date(b.last_contacted).getTime() : 0\n          return aTime - bTime // Older contacts first\n        })\n      \n      setCurrentQueue(prioritizedQueue)\n    }\n  }, [contacts])\n  \n  const startPowerDialing = () => {\n    setIsActive(true)\n    setSessionStart(new Date())\n    setCurrentIndex(0)\n    \n    // Reset stats for new session\n    setDialingStats({\n      attempted: 0,\n      connected: 0,\n      voicemail: 0,\n      noAnswer: 0,\n      callback: 0\n    })\n  }\n  \n  const stopPowerDialing = () => {\n    setIsActive(false)\n    setSessionStart(null)\n  }\n  \n  const dialNext = async () => {\n    if (currentIndex >= currentQueue.length) {\n      setIsActive(false)\n      return\n    }\n    \n    const contact = currentQueue[currentIndex]\n    \n    // Check for team collision before dialing\n    try {\n      const collisionResponse = await fetch('/api/contacts/collision', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ contactId: contact.id })\n      })\n      \n      const { collision } = await collisionResponse.json()\n      \n      if (collision && collision.severity === 'high') {\n        // Skip this contact and show warning\n        console.warn(`Skipping ${contact.first_name} ${contact.last_name} - recent team contact`)\n        advanceToNext()\n        return\n      }\n    } catch (error) {\n      console.error('Collision check failed:', error)\n    }\n    \n    // Update stats\n    setDialingStats(prev => ({ ...prev, attempted: prev.attempted + 1 }))\n    \n    // Make the call\n    onCall?.(contact)\n  }\n  \n  const advanceToNext = () => {\n    setCurrentIndex(prev => prev + 1)\n    \n    // Auto-dial next if enabled and still active\n    if (autoAdvance && isActive && currentIndex + 1 < currentQueue.length) {\n      setTimeout(() => {\n        dialNext()\n      }, 2000) // 2 second delay between calls\n    }\n  }\n  \n  const handleDisposition = async (disposition) => {\n    const contact = currentQueue[currentIndex]\n    \n    // Update stats based on disposition\n    setDialingStats(prev => ({\n      ...prev,\n      [disposition]: prev[disposition] + 1\n    }))\n    \n    // Store disposition in database\n    try {\n      await supabase\n        .from('interactions')\n        .insert({\n          contact_id: contact.id,\n          interaction_type: 'call',\n          direction: 'outbound',\n          outcome: disposition,\n          notes: `Power dialer session - ${disposition}`,\n          created_by: 'power-dialer-agent'\n        })\n    } catch (error) {\n      console.error('Failed to store disposition:', error)\n    }\n    \n    // Call parent handler\n    onDisposition?.(contact, disposition)\n    \n    // Advance to next contact\n    advanceToNext()\n  }\n  \n  const skipContact = () => {\n    advanceToNext()\n  }\n  \n  const getCurrentContact = () => {\n    return currentQueue[currentIndex] || null\n  }\n  \n  const getCompletionRate = () => {\n    if (currentQueue.length === 0) return 0\n    return (currentIndex / currentQueue.length) * 100\n  }\n  \n  const getConnectionRate = () => {\n    if (dialingStats.attempted === 0) return 0\n    return (dialingStats.connected / dialingStats.attempted) * 100\n  }\n  \n  const formatSessionTime = () => {\n    if (!sessionStart) return '00:00'\n    \n    const elapsed = Math.floor((Date.now() - sessionStart.getTime()) / 1000)\n    const minutes = Math.floor(elapsed / 60)\n    const seconds = elapsed % 60\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n  }\n  \n  const currentContact = getCurrentContact()\n  \n  return (\n    <div className=\"voicrm-card p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-bold text-oakmont-sage flex items-center space-x-2\">\n          <Target className=\"h-6 w-6\" />\n          <span>Power Dialer</span>\n        </h2>\n        \n        {isActive && (\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <Clock className=\"h-4 w-4 text-oakmont-tan\" />\n              <span className=\"font-mono\">{formatSessionTime()}</span>\n            </div>\n            <div className=\"text-oakmont-grey\">\n              {currentIndex + 1} of {currentQueue.length}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Session Statistics */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-6\">\n        <div className=\"text-center p-3 bg-oakmont-cream rounded-lg\">\n          <div className=\"text-lg font-bold text-oakmont-sage\">{dialingStats.attempted}</div>\n          <div className=\"text-xs text-oakmont-grey\">Attempted</div>\n        </div>\n        <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n          <div className=\"text-lg font-bold text-green-600\">{dialingStats.connected}</div>\n          <div className=\"text-xs text-oakmont-grey\">Connected</div>\n        </div>\n        <div className=\"text-center p-3 bg-yellow-50 rounded-lg\">\n          <div className=\"text-lg font-bold text-yellow-600\">{dialingStats.voicemail}</div>\n          <div className=\"text-xs text-oakmont-grey\">Voicemail</div>\n        </div>\n        <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n          <div className=\"text-lg font-bold text-gray-600\">{dialingStats.noAnswer}</div>\n          <div className=\"text-xs text-oakmont-grey\">No Answer</div>\n        </div>\n        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n          <div className=\"text-lg font-bold text-blue-600\">{dialingStats.callback}</div>\n          <div className=\"text-xs text-oakmont-grey\">Callbacks</div>\n        </div>\n      </div>\n      \n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <div className=\"p-4 bg-oakmont-sage/5 rounded-lg border border-oakmont-sage/20\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <BarChart3 className=\"h-4 w-4 text-oakmont-sage\" />\n            <span className=\"font-medium text-oakmont-sage\">Connection Rate</span>\n          </div>\n          <div className=\"text-xl font-bold text-oakmont-black\">\n            {getConnectionRate().toFixed(1)}%\n          </div>\n          <div className=\"text-xs text-oakmont-grey\">Target: >25%</div>\n        </div>\n        \n        <div className=\"p-4 bg-oakmont-tan/5 rounded-lg border border-oakmont-tan/20\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Clock className=\"h-4 w-4 text-oakmont-tan\" />\n            <span className=\"font-medium text-oakmont-sage\">Avg Call Time</span>\n          </div>\n          <div className=\"text-xl font-bold text-oakmont-black\">\n            {averageCallTime.toFixed(1)}min\n          </div>\n          <div className=\"text-xs text-oakmont-grey\">Target: 3-5min</div>\n        </div>\n        \n        <div className=\"p-4 bg-oakmont-brown/5 rounded-lg border border-oakmont-brown/20\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Users className=\"h-4 w-4 text-oakmont-brown\" />\n            <span className=\"font-medium text-oakmont-sage\">Calls/Hour</span>\n          </div>\n          <div className=\"text-xl font-bold text-oakmont-black\">\n            {sessionStart ? Math.round(dialingStats.attempted / ((Date.now() - sessionStart.getTime()) / (1000 * 60 * 60))) : 0}\n          </div>\n          <div className=\"text-xs text-oakmont-grey\">Target: 15-20</div>\n        </div>\n      </div>\n      \n      {/* Current Contact Display */}\n      {currentContact && isActive && (\n        <div className=\"p-4 bg-oakmont-cream rounded-lg border border-oakmont-sage/20 mb-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <h3 className=\"font-semibold text-oakmont-black text-lg\">\n                {currentContact.first_name} {currentContact.last_name}\n              </h3>\n              <p className=\"text-oakmont-grey\">{currentContact.company}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n                currentContact.lead_score >= 8 ? 'bg-green-100 text-green-800' :\n                currentContact.lead_score >= 5 ? 'bg-yellow-100 text-yellow-800' :\n                'bg-gray-100 text-gray-800'\n              }`}>\n                Score: {currentContact.lead_score || 'N/A'}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4 text-sm text-oakmont-grey mb-3\">\n            <span className=\"flex items-center space-x-1\">\n              <Phone className=\"h-3 w-3\" />\n              <span>{currentContact.phone_primary}</span>\n            </span>\n            {currentContact.last_contacted && (\n              <span>Last contact: {new Date(currentContact.last_contacted).toLocaleDateString('en-AU')}</span>\n            )}\n          </div>\n          \n          {currentContact.notes && (\n            <div className=\"text-sm text-oakmont-black bg-white p-3 rounded border border-oakmont-sage/10\">\n              {currentContact.notes.slice(0, 120)}{currentContact.notes.length > 120 ? '...' : ''}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Main Controls */}\n      <div className=\"space-y-4\">\n        {!isActive ? (\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-oakmont-sage\" />\n                <span className=\"font-medium text-oakmont-sage\">\n                  {currentQueue.length} contacts queued\n                </span>\n              </div>\n              \n              <label className=\"flex items-center space-x-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={autoAdvance}\n                  onChange={(e) => setAutoAdvance(e.target.checked)}\n                  className=\"rounded border-oakmont-sage/30\"\n                />\n                <span className=\"text-oakmont-grey\">Auto-advance</span>\n              </label>\n            </div>\n            \n            <button\n              onClick={startPowerDialing}\n              disabled={currentQueue.length === 0}\n              className=\"w-full voicrm-btn-primary py-4 text-lg flex items-center justify-center space-x-3\"\n            >\n              <Play className=\"h-6 w-6\" />\n              <span>Start Power Dialing</span>\n            </button>\n            \n            {currentQueue.length === 0 && (\n              <p className=\"text-center text-oakmont-grey text-sm mt-2\">\n                No contacts available for dialing\n              </p>\n            )}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Progress Bar */}\n            <div>\n              <div className=\"flex justify-between text-sm text-oakmont-grey mb-2\">\n                <span>Progress</span>\n                <span>{Math.round(getCompletionRate())}%</span>\n              </div>\n              <div className=\"w-full bg-oakmont-cream rounded-full h-3\">\n                <div \n                  className=\"bg-oakmont-sage h-3 rounded-full transition-all duration-300\"\n                  style={{ width: `${getCompletionRate()}%` }}\n                ></div>\n              </div>\n            </div>\n            \n            {/* Main Action Buttons */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <button\n                onClick={dialNext}\n                disabled={!currentContact}\n                className=\"voicrm-btn-primary py-3 flex items-center justify-center space-x-2\"\n              >\n                <Phone className=\"h-5 w-5\" />\n                <span>Dial Now</span>\n              </button>\n              \n              <button\n                onClick={stopPowerDialing}\n                className=\"bg-red-600 hover:bg-red-700 text-white py-3 rounded-lg flex items-center justify-center space-x-2\"\n              >\n                <Pause className=\"h-5 w-5\" />\n                <span>Stop Session</span>\n              </button>\n            </div>\n            \n            {/* Quick Disposition Buttons */}\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2\">\n              {[\n                { key: 'connected', label: 'Connected', color: 'bg-green-600 hover:bg-green-700' },\n                { key: 'voicemail', label: 'Voicemail', color: 'bg-yellow-600 hover:bg-yellow-700' },\n                { key: 'noAnswer', label: 'No Answer', color: 'bg-gray-600 hover:bg-gray-700' },\n                { key: 'callback', label: 'Callback', color: 'bg-blue-600 hover:bg-blue-700' },\n                { key: 'wrongNumber', label: 'Wrong #', color: 'bg-red-600 hover:bg-red-700' }\n              ].map(({ key, label, color }) => (\n                <button\n                  key={key}\n                  onClick={() => handleDisposition(key)}\n                  className={`${color} text-white py-2 px-3 rounded text-sm font-medium transition-colors`}\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n            \n            {/* Skip Button */}\n            <button\n              onClick={skipContact}\n              className=\"w-full bg-oakmont-grey text-white py-2 rounded-lg hover:bg-oakmont-grey/90 flex items-center justify-center space-x-2\"\n            >\n              <SkipForward className=\"h-4 w-4\" />\n              <span>Skip Contact</span>\n            </button>\n          </div>\n        )}\n      </div>\n      \n      {/* Queue Preview */}\n      {currentQueue.length > 0 && (\n        <div className=\"mt-6\">\n          <h3 className=\"font-medium text-oakmont-sage mb-3 flex items-center space-x-2\">\n            <Users className=\"h-4 w-4\" />\n            <span>Upcoming in Queue</span>\n          </h3>\n          \n          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n            {currentQueue.slice(currentIndex + 1, currentIndex + 6).map((contact, index) => (\n              <div key={contact.id} className=\"flex items-center justify-between p-2 bg-oakmont-cream rounded text-sm\">\n                <div>\n                  <span className=\"font-medium text-oakmont-black\">\n                    {contact.first_name} {contact.last_name}\n                  </span>\n                  <span className=\"text-oakmont-grey ml-2\">{contact.phone_primary}</span>\n                </div>\n                <div className=\"text-oakmont-tan font-medium\">\n                  #{currentIndex + index + 2}\n                </div>\n              </div>\n            ))}\n            \n            {currentQueue.length > currentIndex + 6 && (\n              <div className=\"text-center text-xs text-oakmont-grey py-2\">\n                +{currentQueue.length - currentIndex - 6} more contacts\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Session Summary */}\n      {isActive && sessionStart && (\n        <div className=\"mt-6 p-4 bg-oakmont-sage/5 rounded-lg border border-oakmont-sage/20\">\n          <h4 className=\"font-medium text-oakmont-sage mb-2\">Session Summary</h4>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <div className=\"text-oakmont-grey\">Session Time:</div>\n              <div className=\"font-semibold text-oakmont-black\">{formatSessionTime()}</div>\n            </div>\n            <div>\n              <div className=\"text-oakmont-grey\">Connection Rate:</div>\n              <div className=\"font-semibold text-oakmont-black\">{getConnectionRate().toFixed(1)}%</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}