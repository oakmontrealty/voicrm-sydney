import twilio from 'twilio'

const { twiml } = twilio

export default function handler(req, res) {\n  const response = new twiml.VoiceResponse()\n  \n  try {\n    const { To, From, CallSid } = req.body\n    \n    console.log(`Voice handler called - To: ${To}, From: ${From}, CallSid: ${CallSid}`)\n    \n    // Check if this is an outbound call from WebRTC\n    if (req.body.From && req.body.From.startsWith('client:')) {\n      // Outbound call from browser\n      const destination = req.body.To\n      \n      // Add call tracking\n      response.say({\n        voice: 'alice',\n        language: 'en-AU'\n      }, 'Connecting your call')\n      \n      // Dial the destination\n      const dial = response.dial({\n        callerId: process.env.TWILIO_PHONE_NUMBER || '+61280050000',\n        record: 'record-from-answer',\n        recordingStatusCallback: '/api/voice/recording',\n        timeout: 30\n      })\n      \n      dial.number(destination)\n      \n    } else {\n      // Inbound call - route to available agent\n      response.say({\n        voice: 'alice',\n        language: 'en-AU'  \n      }, 'Thank you for calling Oakmont Realty. Connecting you to an agent.')\n      \n      // Connect to client (browser)\n      const dial = response.dial({\n        timeout: 20,\n        record: 'record-from-answer',\n        recordingStatusCallback: '/api/voice/recording'\n      })\n      \n      // Route to available agent - for now, route to default client\n      dial.client('agent-default')\n      \n      // If no agent available, leave voicemail\n      response.say({\n        voice: 'alice',\n        language: 'en-AU'\n      }, 'All agents are currently busy. Please leave a message after the tone.')\n      \n      response.record({\n        action: '/api/voice/voicemail',\n        method: 'POST',\n        maxLength: 120,\n        transcribe: true,\n        transcribeCallback: '/api/voice/transcription'\n      })\n    }\n    \n    // Set content type for TwiML\n    res.setHeader('Content-Type', 'text/xml')\n    res.status(200).send(response.toString())\n    \n  } catch (error) {\n    console.error('Voice handler error:', error)\n    \n    // Fallback TwiML\n    response.say({\n      voice: 'alice',\n      language: 'en-AU'\n    }, 'We are experiencing technical difficulties. Please try again later.')\n    \n    response.hangup()\n    \n    res.setHeader('Content-Type', 'text/xml')\n    res.status(200).send(response.toString())\n  }\n}"